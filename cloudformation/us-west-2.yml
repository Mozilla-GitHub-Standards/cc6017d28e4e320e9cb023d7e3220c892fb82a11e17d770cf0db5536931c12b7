AWSTemplateFormatVersion: "2010-09-09"
Description: "Mozilla service-map"
Parameters:
  EnvType:
    Description: Environment type
    Default: dev
    Type: String
    AllowedValues:
      - prod
      - dev
  DBPassword:
    Description: Database password
    Type: String
    NoEcho: true
    MinLength: 16
  SSHKeyName:
    Description: Name of SSH key to use for instances
    Type: String
    Default: alm-keys
Mappings:
  dev:
    us-west-2:
      branch: "git checkout master"
      CertificateARN: "arn:aws:acm:us-west-2:656532927350:certificate/857106e8-787f-4a95-9bbc-d51b5bee5c50"
      AMI: "ami-2709bd47"
      S3Bucket: "moz-service-map-dev"
Conditions:
  UseProdCondition:
    !Equals [!Ref EnvType, prod]
  UseDevCondition:
    !Equals [!Ref EnvType, dev]
Resources:
  ServiceMapInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: service-map
  ServiceMapVPC:
    Type: "AWS::EC2::VPC"
    DependsOn: ServiceMapInternetGateway
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: service-map
  ServiceMapAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: ServiceMapVPC
    Properties:
      VpcId:
        Ref: ServiceMapVPC
      InternetGatewayId:
        Ref: ServiceMapInternetGateway
  ServiceMapRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: [ ServiceMapVPC, ServiceMapInternetGateway, ServiceMapAttachGateway ]
    Properties:
      VpcId:
        Ref: ServiceMapVPC
      Tags:
        - Key: Name
          Value: service-map
  ServiceMapDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: ServiceMapInternetGateway
    Properties:
      RouteTableId:
        Ref: ServiceMapRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: ServiceMapInternetGateway
  ServiceMapSubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn: ServiceMapRouteTable
    Properties:
      AvailabilityZone: "us-west-2a"
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: ServiceMapVPC
      Tags:
        - Key: Name
          Value: service-map subnet 1
  ServiceMapSubnet2:
    Type: "AWS::EC2::Subnet"
    DependsOn: ServiceMapRouteTable
    Properties:
      AvailabilityZone: "us-west-2b"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: ServiceMapVPC
      Tags:
        - Key: Name
          Value: service-map subnet 2
  ServiceMapRouteAssoc1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: ServiceMapDefaultRoute
    Properties:
      RouteTableId:
        Ref: ServiceMapRouteTable
      SubnetId:
        Ref: ServiceMapSubnet1
  ServiceMapRouteAssoc2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: ServiceMapDefaultRoute
    Properties:
      RouteTableId:
        Ref: ServiceMapRouteTable
      SubnetId:
        Ref: ServiceMapSubnet2
  ServiceMapDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: service-map
      SubnetIds:
        - Ref: ServiceMapSubnet1
        - Ref: ServiceMapSubnet2
  ServiceMapDBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Ref: ServiceMapVPC
      GroupDescription: "security group for service-map db"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: service-map db
  ServiceMapDB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 15
      BackupRetentionPeriod: 15
      DBInstanceClass: db.m4.large
      DBInstanceIdentifier: service-map
      VPCSecurityGroups:
        - Ref: ServiceMapDBSecurityGroup
      DBName: servicemap
      Engine: postgres
      EngineVersion: 9.5.6
      MasterUsername: dbadmin
      MasterUserPassword:
        Ref: DBPassword
      DBSubnetGroupName:
        Ref: ServiceMapDBSubnetGroup
      PubliclyAccessible: true
      MultiAZ: true
  ServiceMapS3Bucket:
    Condition: UseDevCondition
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !FindInMap [!Ref EnvType, !Ref "AWS::Region", S3Bucket]
  ServiceMapLaunchConfigDev:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Condition: UseDevCondition
    Properties:
      KeyName: !Ref SSHKeyName
      ImageId: !FindInMap [!Ref EnvType, !Ref "AWS::Region", AMI]
      IamInstanceProfile: "service-map-instance-profile"
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all
          runcmd:
            - REGION=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone/ | sed 's/[a-z]$//')
            - cd /root
            - apt-get install -y curl ruby
            - curl -OL https://aws-codedeploy-$REGION.s3.amazonaws.com/latest/install
            - chmod +x ./install
            - ./install auto
      SecurityGroups:
        - !Ref ServiceMapSecurityGroup
      InstanceType: "t2.medium"
  ServiceMapLaunchConfigProd:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Condition: UseDevCondition
    Properties:
      KeyName: !Ref SSHKeyName
      ImageId: !FindInMap [!Ref EnvType, !Ref "AWS::Region", AMI]
      IamInstanceProfile: "service-map-instance-profile"
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all
          runcmd:
            - REGION=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone/ | sed 's/[a-z]$//')
            - cd /root
            - apt-get install -y curl
            - curl -OL https://aws-codedeploy-$REGION.s3.amazonaws.com/latest/install
            - chmod +x ./install
            - ./install auto
      SecurityGroups:
        - !Ref ServiceMapSecurityGroup
      InstanceType: "t2.medium"
  ServiceMapSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: ServiceMapVPC
    Properties:
      GroupDescription: "security group for service-map instances"
      VpcId: !Ref ServiceMapVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: service-map instances
  ServiceMapAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn: [ ServiceMapSubnet1, ServiceMapSubnet2 ]
    Properties:
      Tags:
        - Key: Name
          Value: service-map instance
          PropagateAtLaunch: true
        - Key: Application
          Value: service-map
          PropagateAtLaunch: true
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      VPCZoneIdentifier:
        - !Ref ServiceMapSubnet1
        - !Ref ServiceMapSubnet2
      LaunchConfigurationName: !If [UseProdCondition, Ref: ServiceMapLaunchConfigProd, Ref: ServiceMapLaunchConfigDev]
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ServiceMapELBSecurityGroup
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref ServiceMapSubnet1
        - !Ref ServiceMapSubnet2
      SecurityGroups:
        - !Ref ServiceMapELBSecurityGroup
      Tags:
        - Key: Name
          Value: service-map
  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ApplicationLoadBalancer
    Properties:
      Certificates:
        - CertificateArn: !FindInMap [!Ref EnvType, !Ref "AWS::Region", CertificateARN]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ApplicationLoadBalancer
    Properties:
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 5
      HealthCheckPath: /health
      HealthCheckPort: 443
      Name: service-map-web
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref ServiceMapVPC
      Tags:
        - Key: Name
          Value: service-map
  ServiceMapELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: ServiceMapVPC
    Properties:
      GroupDescription: "security group for service-map elb"
      VpcId: !Ref ServiceMapVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: service-map elb

service: servicemapper
provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-west-2
  environment:
    ASSET_OWNER_TABLE: ${opt:stage, self:provider.stage}-AssetOwners
    INDICATOR_TABLE: ${opt:stage, self:provider.stage}-Indicators
    ASSET_TABLE: ${opt:stage, self:provider.stage}-Assets
    ENVIRONMENT: dev
    REGION: ${opt:region, self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:CreateTable
        - dynamodb:UpdateTable
        - dynamodb:GetRecords
        - dynamodb:BatchWriteItem
        - dynamodb:DescribeLimits
        - dynamodb:UpdateTimeToLive
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ASSET_OWNER_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:CreateTable
        - dynamodb:UpdateTable
        - dynamodb:GetRecords
        - dynamodb:BatchWriteItem
        - dynamodb:DescribeLimits
        - dynamodb:UpdateTimeToLive
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.INDICATOR_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:CreateTable
        - dynamodb:UpdateTable
        - dynamodb:GetRecords
        - dynamodb:BatchWriteItem
        - dynamodb:DescribeLimits
        - dynamodb:UpdateTimeToLive
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ASSET_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:ListTables
        - dynamodb:DescribeLimits
        - dynamodb:DescribeReservedCapacity
        - dynamodb:DescribeReservedCapacityOfferings
      Resource: "*"


functions:
  api:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: ANY {proxy+}

  # status:
  #   handler: models/v1/asset_owners/asset_owner.status
  #   events:
  #     - http:
  #         path: api/v1/status
  #         method: get
  # create:
  #   handler: models/v1/asset_owners/asset_owner.create
  #   events:
  #     - http:
  #         path: api/v1/assetowner
  #         method: post
  #         cors: true
  # list:
  #   handler: models/v1/asset_owners/asset_owner.list
  #   events:
  #     - http:
  #         path: api/v1/assetowners
  #         method: get
  #         cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
custom:
  pythonRequirements:
    usePipenv: true
  wsgi:
    app: api.app
    packRequirements: false
plugins:
  - serverless-python-requirements
  - serverless-wsgi
